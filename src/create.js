"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const AWS = require('aws-sdk');
const db = new AWS.DynamoDB.DocumentClient();
const uuidv4 = require('uuid/v4');
const TABLE_NAME = process.env.TABLE_NAME || '';
const PRIMARY_KEY = process.env.PRIMARY_KEY || '';
const RESERVED_RESPONSE = `Error: You're using AWS reserved keywords as attributes`, DYNAMODB_EXECUTION_ERROR = `Error: Execution update, caused a Dynamodb error, please take a look at your CloudWatch Logs.`;
exports.handler = async (event = {}) => {
    if (!event.body) {
        return {
            statusCode: 400,
            body: 'invalid request, you are missing the parameter body',
        };
    }
    const item = typeof event.body == 'object' ? event.body : JSON.parse(event.body);
    item[PRIMARY_KEY] = uuidv4();
    const params = {
        TableName: TABLE_NAME,
        Item: item,
    };
    try {
        await db.put(params).promise();
        return { statusCode: 201, body: '' };
    }
    catch (dbError) {
        const errorResponse = dbError.code === 'ValidationException' &&
            dbError.message.includes('reserved keyword')
            ? DYNAMODB_EXECUTION_ERROR
            : RESERVED_RESPONSE;
        return { statusCode: 500, body: errorResponse };
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY3JlYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsTUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQy9CLE1BQU0sRUFBRSxHQUFHLElBQUksR0FBRyxDQUFDLFFBQVEsQ0FBQyxjQUFjLEVBQUUsQ0FBQztBQUM3QyxNQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDbEMsTUFBTSxVQUFVLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLElBQUksRUFBRSxDQUFDO0FBQ2hELE1BQU0sV0FBVyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxJQUFJLEVBQUUsQ0FBQztBQUVsRCxNQUFNLGlCQUFpQixHQUFHLHlEQUF5RCxFQUNsRix3QkFBd0IsR0FBRywrRkFBK0YsQ0FBQztBQUUvRyxRQUFBLE9BQU8sR0FBRyxLQUFLLEVBQUUsUUFBYSxFQUFFLEVBQWdCLEVBQUU7SUFDOUQsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUU7UUFDaEIsT0FBTztZQUNOLFVBQVUsRUFBRSxHQUFHO1lBQ2YsSUFBSSxFQUFFLHFEQUFxRDtTQUMzRCxDQUFDO0tBQ0Y7SUFDRCxNQUFNLElBQUksR0FDVCxPQUFPLEtBQUssQ0FBQyxJQUFJLElBQUksUUFBUSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNyRSxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsTUFBTSxFQUFFLENBQUM7SUFDN0IsTUFBTSxNQUFNLEdBQUc7UUFDZCxTQUFTLEVBQUUsVUFBVTtRQUNyQixJQUFJLEVBQUUsSUFBSTtLQUNWLENBQUM7SUFFRixJQUFJO1FBQ0gsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQy9CLE9BQU8sRUFBRSxVQUFVLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsQ0FBQztLQUNyQztJQUFDLE9BQU8sT0FBTyxFQUFFO1FBQ2pCLE1BQU0sYUFBYSxHQUNsQixPQUFPLENBQUMsSUFBSSxLQUFLLHFCQUFxQjtZQUN0QyxPQUFPLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxrQkFBa0IsQ0FBQztZQUMzQyxDQUFDLENBQUMsd0JBQXdCO1lBQzFCLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQztRQUN0QixPQUFPLEVBQUUsVUFBVSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsYUFBYSxFQUFFLENBQUM7S0FDaEQ7QUFDRixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBBV1MgPSByZXF1aXJlKCdhd3Mtc2RrJyk7XG5jb25zdCBkYiA9IG5ldyBBV1MuRHluYW1vREIuRG9jdW1lbnRDbGllbnQoKTtcbmNvbnN0IHV1aWR2NCA9IHJlcXVpcmUoJ3V1aWQvdjQnKTtcbmNvbnN0IFRBQkxFX05BTUUgPSBwcm9jZXNzLmVudi5UQUJMRV9OQU1FIHx8ICcnO1xuY29uc3QgUFJJTUFSWV9LRVkgPSBwcm9jZXNzLmVudi5QUklNQVJZX0tFWSB8fCAnJztcblxuY29uc3QgUkVTRVJWRURfUkVTUE9OU0UgPSBgRXJyb3I6IFlvdSdyZSB1c2luZyBBV1MgcmVzZXJ2ZWQga2V5d29yZHMgYXMgYXR0cmlidXRlc2AsXG5cdERZTkFNT0RCX0VYRUNVVElPTl9FUlJPUiA9IGBFcnJvcjogRXhlY3V0aW9uIHVwZGF0ZSwgY2F1c2VkIGEgRHluYW1vZGIgZXJyb3IsIHBsZWFzZSB0YWtlIGEgbG9vayBhdCB5b3VyIENsb3VkV2F0Y2ggTG9ncy5gO1xuXG5leHBvcnQgY29uc3QgaGFuZGxlciA9IGFzeW5jIChldmVudDogYW55ID0ge30pOiBQcm9taXNlPGFueT4gPT4ge1xuXHRpZiAoIWV2ZW50LmJvZHkpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0c3RhdHVzQ29kZTogNDAwLFxuXHRcdFx0Ym9keTogJ2ludmFsaWQgcmVxdWVzdCwgeW91IGFyZSBtaXNzaW5nIHRoZSBwYXJhbWV0ZXIgYm9keScsXG5cdFx0fTtcblx0fVxuXHRjb25zdCBpdGVtID1cblx0XHR0eXBlb2YgZXZlbnQuYm9keSA9PSAnb2JqZWN0JyA/IGV2ZW50LmJvZHkgOiBKU09OLnBhcnNlKGV2ZW50LmJvZHkpO1xuXHRpdGVtW1BSSU1BUllfS0VZXSA9IHV1aWR2NCgpO1xuXHRjb25zdCBwYXJhbXMgPSB7XG5cdFx0VGFibGVOYW1lOiBUQUJMRV9OQU1FLFxuXHRcdEl0ZW06IGl0ZW0sXG5cdH07XG5cblx0dHJ5IHtcblx0XHRhd2FpdCBkYi5wdXQocGFyYW1zKS5wcm9taXNlKCk7XG5cdFx0cmV0dXJuIHsgc3RhdHVzQ29kZTogMjAxLCBib2R5OiAnJyB9O1xuXHR9IGNhdGNoIChkYkVycm9yKSB7XG5cdFx0Y29uc3QgZXJyb3JSZXNwb25zZSA9XG5cdFx0XHRkYkVycm9yLmNvZGUgPT09ICdWYWxpZGF0aW9uRXhjZXB0aW9uJyAmJlxuXHRcdFx0ZGJFcnJvci5tZXNzYWdlLmluY2x1ZGVzKCdyZXNlcnZlZCBrZXl3b3JkJylcblx0XHRcdFx0PyBEWU5BTU9EQl9FWEVDVVRJT05fRVJST1Jcblx0XHRcdFx0OiBSRVNFUlZFRF9SRVNQT05TRTtcblx0XHRyZXR1cm4geyBzdGF0dXNDb2RlOiA1MDAsIGJvZHk6IGVycm9yUmVzcG9uc2UgfTtcblx0fVxufTtcbiJdfQ==